{"ts":1369413164771,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1369413172893,"patch":[[{"diffs":[[1,"\r\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\r\n<html>\r\n<head>\r\n<title>WebRTC Reference App</title>\r\n<link rel=\"canonical\" href=\"https://apprtc.appspot.com/?r=91533542\"/>\r\n<meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\"/>\r\n<script src=\"/_ah/channel/jsapi\"></script>\r\n\r\n<!-- Load the polyfill to switch-hit between Chrome and Firefox -->\r\n<script src=\"/js/adapter.js\"></script>\r\n\r\n<style type=\"text/css\">\r\n  a:link { color: #ffffff; }\r\n  a:visited {color: #ffffff; }\r\n  html, body {\r\n    background-color: #000000;\r\n    height: 100%;\r\n    font-family:Verdana, Arial, Helvetica, sans-serif;\r\n  }\r\n  body {\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n  #container {\r\n    background-color: #000000;\r\n    position: relative;\r\n    min-height: 100%;\r\n    width: 100%;\r\n    margin: 0px auto;\r\n    -webkit-perspective: 1000;\r\n  }\r\n  #card {\r\n    -webkit-transition-property: rotation;\r\n    -webkit-transition-duration: 2s;\r\n    -webkit-transform-style: preserve-3d;\r\n  }\r\n  #local {\r\n    position: absolute;\r\n    width: 100%;\r\n    -webkit-transform: scale(-1, 1);\r\n    -webkit-backface-visibility: hidden;\r\n  }\r\n  #remote {\r\n    position: absolute;\r\n    width: 100%;\r\n    -webkit-transform: rotateY(180deg);\r\n    -webkit-backface-visibility: hidden;\r\n  }\r\n  #mini {\r\n    position: absolute;\r\n    height: 30%;\r\n    width: 30%;\r\n    bottom: 32px;\r\n    right: 4px;\r\n    -webkit-transform: scale(-1, 1);\r\n    opacity: 1.0;\r\n  }\r\n  #localVideo {\r\n    opacity: 0;\r\n    -webkit-transition-property: opacity;\r\n    -webkit-transition-duration: 2s;\r\n  }\r\n  #remoteVideo {\r\n    opacity: 0;\r\n    -webkit-transition-property: opacity;\r\n    -webkit-transition-duration: 2s;\r\n  }\r\n  #miniVideo {\r\n    opacity: 0;\r\n    -webkit-transition-property: opacity;\r\n    -webkit-transition-duration: 2s;\r\n  }\r\n  #footer {\r\n    spacing: 4px;\r\n    position: absolute;\r\n    bottom: 0;\r\n    width: 100%;\r\n    height: 28px;\r\n    background-color: #3F3F3F;\r\n    color: rgb(255, 255, 255);\r\n    font-size:13px; font-weight: bold;\r\n    line-height: 28px;\r\n    text-align: center;\r\n  }\r\n  #hangup {\r\n   font-size:13px; font-weight:bold;\r\n   color:#FFFFFF;\r\n   width:128px;\r\n   height:24px;\r\n   background-color:#808080;\r\n   border-style:solid;\r\n   border-color:#FFFFFF;\r\n   margin:2px;\r\n  }\r\n  #logo {\r\n    display: block;\r\n    top:4;\r\n    right:4;\r\n    position:absolute;\r\n    float:right;\r\n    opacity: 0.5;\r\n  }\r\n\r\n</style>\r\n</head>\r\n<body>\r\n<script type=\"text/javascript\">\r\n  var localVideo;\r\n  var miniVideo;\r\n  var remoteVideo;\r\n  var localStream;\r\n  var remoteStream;\r\n  var channel;\r\n  var channelReady = false;\r\n  var turnReady = false;\r\n  var pc;\r\n  var socket;\r\n  var initiator = 1;\r\n  var started = false;\r\n  var pc_config = {\"iceServers\": [{\"url\": \"stun:stun.l.google.com:19302\"}]};\r\n  var pc_constraints = {\"optional\": [{\"DtlsSrtpKeyAgreement\": true}]};\r\n  // Set up audio and video regardless of what devices are present.\r\n  var sdpConstraints = {'mandatory': {\r\n                          'OfferToReceiveAudio':true, \r\n                          'OfferToReceiveVideo':true }};\r\n  var isVideoMuted = false;\r\n  var isAudioMuted = false;\r\n  var stereo = false;\r\n\r\n  function initialize() {\r\n    console.log(\"Initializing; room=91533542.\");\r\n    card = document.getElementById(\"card\");\r\n    localVideo = document.getElementById(\"localVideo\");\r\n    miniVideo = document.getElementById(\"miniVideo\");\r\n    remoteVideo = document.getElementById(\"remoteVideo\");\r\n    resetStatus();\r\n    // NOTE: AppRTCClient.java searches & parses this line; update there when\r\n    // changing here.\r\n    openChannel('AHRlWroRsvA9sYt1nsytroWe-cDJTYzChZlJjS6D6ho8rOWukdFu6jSQAI0lXJ8nX0ZLe-6VdcdFy8-Abhab5h8HhuCCaou99Z_WcGp4SP6xuegS5HHSGGs');\r\n    requestTurn('https://computeengineondemand.appspot.com/turn?username=10815863&key=4080218913');\r\n    stereo = false;\r\n    doGetUserMedia();\r\n  }\r\n\r\n  function openChannel(channelToken) {\r\n    console.log(\"Opening channel.\");\r\n    var channel = new goog.appengine.Channel(channelToken);\r\n    var handler = {\r\n      'onopen': onChannelOpened,\r\n      'onmessage': onChannelMessage,\r\n      'onerror': onChannelError,\r\n      'onclose': onChannelClosed\r\n    };\r\n    socket = channel.open(handler);\r\n  }\r\n\r\n  function requestTurn(turn_url) {\r\n    var turnExists = false;\r\n    for (var i in pc_config.iceServers) {\r\n      if (pc_config.iceServers[i].url.substr(0, 5) == 'turn:') {\r\n        turnExists = true;\r\n        turnReady = true;\r\n        break;\r\n      }\r\n    }\r\n    if (!turnExists) {\r\n      // No turn server. Get one from computeengineondemand.appspot.com:\r\n      xmlhttp = new XMLHttpRequest();\r\n      xmlhttp.onreadystatechange = onTurnResult;\r\n      xmlhttp.open(\"GET\", turn_url, true);\r\n      xmlhttp.send();\r\n    }\r\n  }\r\n\r\n  function onTurnResult() {\r\n    if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {\r\n      var turnServer = JSON.parse(xmlhttp.responseText);\r\n      pc_config.iceServers.push({\r\n        \"url\": \"turn:\" + turnServer.username + \"@\" + turnServer.turn,\r\n        \"credential\": turnServer.password\r\n      });\r\n      turnReady = true;\r\n    }\r\n  }\r\n\r\n  function resetStatus() {\r\n    if (!initiator) {\r\n      setStatus(\"Waiting for someone to join: <a href=\\\"https://apprtc.appspot.com/?r=91533542\\\">https://apprtc.appspot.com/?r=91533542</a>\");\r\n    } else {\r\n      setStatus(\"Initializing...\");\r\n    }\r\n  }\r\n\r\n  function doGetUserMedia() {\r\n    // Call into getUserMedia via the polyfill (adapter.js).\r\n    var constraints = {\"audio\": true, \"video\": {\"mandatory\": {}, \"optional\": []}}; \r\n    try {\r\n      getUserMedia(constraints, onUserMediaSuccess,\r\n                   onUserMediaError);\r\n      console.log(\"Requested access to local media with mediaConstraints:\\n\" +\r\n                  \"  \\\"\" + JSON.stringify(constraints) + \"\\\"\");\r\n    } catch (e) {\r\n      alert(\"getUserMedia() failed. Is this a WebRTC capable browser?\");\r\n      console.log(\"getUserMedia failed with exception: \" + e.message);\r\n    }\r\n  }\r\n\r\n  function createPeerConnection() {    \r\n    // Force the use of a number IP STUN server for Firefox.\r\n    if (webrtcDetectedBrowser == \"firefox\") {\r\n      pc_config = {\"iceServers\":[{\"url\":\"stun:23.21.150.121\"}]};\r\n    }\r\n    try {\r\n      // Create an RTCPeerConnection via the polyfill (adapter.js).\r\n      pc = new RTCPeerConnection(pc_config, pc_constraints);\r\n      pc.onicecandidate = onIceCandidate;\r\n      console.log(\"Created RTCPeerConnnection with:\\n\" + \r\n                  \"  config: \\\"\" + JSON.stringify(pc_config) + \"\\\";\\n\" + \r\n                  \"  constraints: \\\"\" + JSON.stringify(pc_constraints) + \"\\\".\");\r\n    } catch (e) {\r\n      console.log(\"Failed to create PeerConnection, exception: \" + e.message);\r\n      alert(\"Cannot create RTCPeerConnection object; WebRTC is not supported by this browser.\");\r\n        return;\r\n    }\r\n    pc.onaddstream = onRemoteStreamAdded;\r\n    pc.onremovestream = onRemoteStreamRemoved;\r\n  }\r\n\r\n  function maybeStart() {\r\n    if (!started && localStream && channelReady && turnReady) {\r\n      setStatus(\"Connecting...\");\r\n      console.log(\"Creating PeerConnection.\");\r\n      createPeerConnection();\r\n      console.log(\"Adding local stream.\");\r\n      pc.addStream(localStream);\r\n      started = true;\r\n      // Caller initiates offer to peer.\r\n      if (initiator)\r\n        doCall();\r\n    }\r\n  }\r\n\r\n  function setStatus(state) {\r\n    footer.innerHTML = state;\r\n  }\r\n\r\n  function doCall() {\r\n    var constraints = {\"optional\": [], \"mandatory\": {\"MozDontOfferDataChannel\": true}};\r\n    // temporary measure to remove Moz* constraints in Chrome\r\n    if (webrtcDetectedBrowser === \"chrome\") {\r\n      for (prop in constraints.mandatory) {\r\n        if (prop.indexOf(\"Moz\") != -1) {\r\n          delete constraints.mandatory[prop];\r\n        }\r\n       }\r\n     }   \r\n    constraints = mergeConstraints(constraints, sdpConstraints);\r\n    console.log(\"Sending offer to peer, with constraints: \\n\" +\r\n                \"  \\\"\" + JSON.stringify(constraints) + \"\\\".\")\r\n    pc.createOffer(setLocalAndSendMessage, null, constraints);\r\n  }\r\n\r\n  function doAnswer() {\r\n    console.log(\"Sending answer to peer.\");\r\n    pc.createAnswer(setLocalAndSendMessage, null, sdpConstraints);\r\n  }\r\n\r\n  function mergeConstraints(cons1, cons2) {\r\n    var merged = cons1;\r\n    for (var name in cons2.mandatory) {\r\n      merged.mandatory[name] = cons2.mandatory[name];\r\n    }\r\n    merged.optional.concat(cons2.optional);\r\n    return merged;\r\n  }\r\n\r\n  function setLocalAndSendMessage(sessionDescription) {\r\n    // Set Opus as the preferred codec in SDP if Opus is present.\r\n    sessionDescription.sdp = preferOpus(sessionDescription.sdp);\r\n    pc.setLocalDescription(sessionDescription);\r\n    sendMessage(sessionDescription);\r\n  }\r\n\r\n  function sendMessage(message) {\r\n    var msgString = JSON.stringify(message);\r\n    console.log('C->S: ' + msgString);\r\n    // NOTE: AppRTCClient.java searches & parses this line; update there when\r\n    // changing here.\r\n    path = '/message?r=91533542' + '&u=10815863';\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.open('POST', path, true);\r\n    xhr.send(msgString);\r\n  }\r\n\r\n  function processSignalingMessage(message) {\r\n    var msg = JSON.parse(message);\r\n    if (msg.type === 'offer') {\r\n      // Callee creates PeerConnection\r\n      if (!initiator && !started)\r\n        maybeStart();\r\n      // Set Opus in Stereo, if stereo enabled.\r\n      if (stereo)\r\n        msg.sdp = addStereo(msg.sdp);\r\n      pc.setRemoteDescription(new RTCSessionDescription(msg));\r\n      doAnswer();\r\n    } else if (msg.type === 'answer' && started) {\r\n      // Set Opus in Stereo, if stereo enabled.\r\n      if (stereo)\r\n        msg.sdp = addStereo(msg.sdp);\r\n      pc.setRemoteDescription(new RTCSessionDescription(msg));\r\n    } else if (msg.type === 'candidate' && started) {\r\n      var candidate = new RTCIceCandidate({sdpMLineIndex:msg.label,\r\n                                           candidate:msg.candidate});\r\n      pc.addIceCandidate(candidate);\r\n    } else if (msg.type === 'bye' && started) {\r\n      onRemoteHangup();\r\n    }\r\n  }\r\n\r\n  function onChannelOpened() {\r\n    console.log('Channel opened.');\r\n    channelReady = true;\r\n    if (initiator) maybeStart();\r\n  }\r\n  function onChannelMessage(message) {\r\n    console.log('S->C: ' + message.data);\r\n    processSignalingMessage(message.data);\r\n  }\r\n  function onChannelError() {\r\n    console.log('Channel error.');\r\n  }\r\n  function onChannelClosed() {\r\n    console.log('Channel closed.');\r\n  }\r\n\r\n  function onUserMediaSuccess(stream) {\r\n    console.log(\"User has granted access to local media.\");\r\n    // Call the polyfill wrapper to attach the media stream to this element.\r\n    attachMediaStream(localVideo, stream);\r\n    localVideo.style.opacity = 1;\r\n    localStream = stream;\r\n    // Caller creates PeerConnection.\r\n    if (initiator) maybeStart();\r\n  }\r\n\r\n  function onUserMediaError(error) {\r\n    console.log(\"Failed to get access to local media. Error code was \" + error.code);\r\n    alert(\"Failed to get access to local media. Error code was \" + error.code + \".\");\r\n  }\r\n\r\n  function onIceCandidate(event) {\r\n    if (event.candidate) {\r\n      sendMessage({type: 'candidate',\r\n                   label: event.candidate.sdpMLineIndex,\r\n                   id: event.candidate.sdpMid,\r\n                   candidate: event.candidate.candidate});\r\n    } else {\r\n      console.log(\"End of candidates.\");\r\n    }\r\n  }\r\n\r\n  function onRemoteStreamAdded(event) {\r\n    console.log(\"Remote stream added.\"); \r\n    reattachMediaStream(miniVideo, localVideo);\r\n    attachMediaStream(remoteVideo, event.stream);\r\n    remoteStream = event.stream;\r\n    waitForRemoteVideo();  \r\n  }\r\n  function onRemoteStreamRemoved(event) {\r\n    console.log(\"Remote stream removed.\");\r\n  }\r\n\r\n  function onHangup() {\r\n    console.log(\"Hanging up.\");\r\n    transitionToDone();\r\n    stop();\r\n    // will trigger BYE from server\r\n    socket.close();\r\n  }\r\n   \r\n  function onRemoteHangup() {\r\n    console.log('Session terminated.');\r\n    transitionToWaiting();\r\n    stop();\r\n    initiator = 0;\r\n  }\r\n\r\n  function stop() {\r\n    started = false;\r\n    isAudioMuted = false;\r\n    isVideoMuted = false;\r\n    pc.close();\r\n    pc = null;\r\n  }\r\n\r\n  function waitForRemoteVideo() {\r\n    // Call the getVideoTracks method via adapter.js.\r\n    videoTracks = remoteStream.getVideoTracks();\r\n    if (videoTracks.length === 0 || remoteVideo.currentTime > 0) {\r\n      transitionToActive();\r\n    } else {\r\n      setTimeout(waitForRemoteVideo, 100);\r\n    }\r\n  }\r\n  function transitionToActive() {\r\n    remoteVideo.style.opacity = 1;\r\n    card.style.webkitTransform = \"rotateY(180deg)\";\r\n    setTimeout(function() { localVideo.src = \"\"; }, 500);\r\n    setTimeout(function() { miniVideo.style.opacity = 1; }, 1000);\r\n    setStatus(\"<input type=\\\"button\\\" id=\\\"hangup\\\" value=\\\"Hang up\\\" onclick=\\\"onHangup()\\\" />\");\r\n  }\r\n  function transitionToWaiting() {\r\n    card.style.webkitTransform = \"rotateY(0deg)\";\r\n    setTimeout(function() {\r\n                 localVideo.src = miniVideo.src;\r\n                 miniVideo.src = \"\";\r\n                 remoteVideo.src = \"\" }, 500);\r\n    miniVideo.style.opacity = 0;\r\n    remoteVideo.style.opacity = 0;\r\n    resetStatus();\r\n  }\r\n  function transitionToDone() {\r\n    localVideo.style.opacity = 0;\r\n    remoteVideo.style.opacity = 0;\r\n    miniVideo.style.opacity = 0;\r\n    setStatus(\"You have left the call. <a href=\\\"https://apprtc.appspot.com/?r=91533542\\\">Click here</a> to rejoin.\");\r\n  }\r\n  function enterFullScreen() {\r\n    container.webkitRequestFullScreen();\r\n  }\r\n\r\n  function toggleVideoMute() {\r\n    // Call the getVideoTracks method via adapter.js.\r\n    videoTracks = localStream.getVideoTracks();\r\n\r\n    if (videoTracks.length === 0) {\r\n      console.log(\"No local video available.\");\r\n      return;\r\n    }\r\n\r\n    if (isVideoMuted) {\r\n      for (i = 0; i < videoTracks.length; i++) {\r\n        videoTracks[i].enabled = true;\r\n      }\r\n      console.log(\"Video unmuted.\");\r\n    } else {\r\n      for (i = 0; i < videoTracks.length; i++) {\r\n        videoTracks[i].enabled = false;\r\n      }\r\n      console.log(\"Video muted.\");\r\n    }\r\n\r\n    isVideoMuted = !isVideoMuted;    \r\n  }\r\n\r\n  function toggleAudioMute() {\r\n    // Call the getAudioTracks method via adapter.js.\r\n    audioTracks = localStream.getAudioTracks();\r\n\r\n    if (audioTracks.length === 0) {\r\n      console.log(\"No local audio available.\");\r\n      return;\r\n    }\r\n\r\n    if (isAudioMuted) {\r\n      for (i = 0; i < audioTracks.length; i++) {\r\n        audioTracks[i].enabled = true;\r\n      }\r\n      console.log(\"Audio unmuted.\");\r\n    } else {\r\n      for (i = 0; i < audioTracks.length; i++){\r\n        audioTracks[i].enabled = false;\r\n      }\r\n      console.log(\"Audio muted.\");\r\n    }\r\n\r\n    isAudioMuted = !isAudioMuted;  \r\n  }\r\n\r\n  setTimeout(initialize, 1);\r\n\r\n  // Send BYE on refreshing(or leaving) a demo page\r\n  // to ensure the room is cleaned for next session.\r\n  window.onbeforeunload = function() {\r\n    sendMessage({type: 'bye'});\r\n  }\r\n\r\n  // Ctrl-D: toggle audio mute; Ctrl-E: toggle video mute.\r\n  // On Mac, Command key is instead of Ctrl.\r\n  // Return false to screen out original Chrome shortcuts.\r\n  document.onkeydown = function() {\r\n    if (navigator.appVersion.indexOf(\"Mac\") != -1) {\r\n      if (event.metaKey && event.keyCode === 68) {\r\n        toggleAudioMute();\r\n        return false;\r\n      }\r\n      if (event.metaKey && event.keyCode === 69) {\r\n        toggleVideoMute();\r\n        return false;\r\n      }\r\n    } else {\r\n      if (event.ctrlKey && event.keyCode === 68) {\r\n        toggleAudioMute();\r\n        return false;\r\n      }\r\n      if (event.ctrlKey && event.keyCode === 69) {\r\n        toggleVideoMute();\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Set Opus as the default audio codec if it's present.\r\n  function preferOpus(sdp) {\r\n    var sdpLines = sdp.split('\\r\\n');\r\n\r\n    // Search for m line.\r\n    for (var i = 0; i < sdpLines.length; i++) {\r\n        if (sdpLines[i].search('m=audio') !== -1) {\r\n          var mLineIndex = i;\r\n          break;\r\n        } \r\n    }\r\n    if (mLineIndex === null)\r\n      return sdp;\r\n\r\n    // If Opus is available, set it as the default in m line.\r\n    for (var i = 0; i < sdpLines.length; i++) {\r\n      if (sdpLines[i].search('opus/48000') !== -1) {        \r\n        var opusPayload = extractSdp(sdpLines[i], /:(\\d+) opus\\/48000/i);\r\n        if (opusPayload)\r\n          sdpLines[mLineIndex] = setDefaultCodec(sdpLines[mLineIndex], opusPayload);\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Remove CN in m line and sdp.\r\n    sdpLines = removeCN(sdpLines, mLineIndex);\r\n\r\n    sdp = sdpLines.join('\\r\\n');\r\n    return sdp;\r\n  }\r\n\r\n  // Set Opus in stereo if stereo is enabled.\r\n  function addStereo(sdp) {\r\n    var sdpLines = sdp.split('\\r\\n');\r\n\r\n    // Find opus payload.\r\n    for (var i = 0; i < sdpLines.length; i++) {\r\n      if (sdpLines[i].search('opus/48000') !== -1) {\r\n        var opusPayload = extractSdp(sdpLines[i], /:(\\d+) opus\\/48000/i);\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Find the payload in fmtp line.\r\n    for (var i = 0; i < sdpLines.length; i++) {\r\n      if (sdpLines[i].search('a=fmtp') !== -1) {\r\n        var payload = extractSdp(sdpLines[i], /a=fmtp:(\\d+)/ );\r\n        if (payload === opusPayload) {\r\n          var fmtpLineIndex = i;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    // No fmtp line found.\r\n    if (fmtpLineIndex === null)\r\n      return sdp;\r\n\r\n    // append stereo=1 to fmtp line.\r\n    sdpLines[fmtpLineIndex] = sdpLines[fmtpLineIndex].concat(' stereo=1');\r\n\r\n    sdp = sdpLines.join('\\r\\n');\r\n    return sdp;\r\n  }\r\n\r\n  function extractSdp(sdpLine, pattern) {\r\n    var result = sdpLine.match(pattern);\r\n    return (result && result.length == 2)? result[1]: null;\r\n  }\r\n\r\n  // Set the selected codec to the first in m line.\r\n  function setDefaultCodec(mLine, payload) {\r\n    var elements = mLine.split(' ');\r\n    var newLine = new Array();\r\n    var index = 0;\r\n    for (var i = 0; i < elements.length; i++) {\r\n      if (index === 3) // Format of media starts from the fourth.\r\n        newLine[index++] = payload; // Put target payload to the first.\r\n      if (elements[i] !== payload)\r\n        newLine[index++] = elements[i];\r\n    }\r\n    return newLine.join(' ');\r\n  }\r\n\r\n  // Strip CN from sdp before CN constraints is ready.\r\n  function removeCN(sdpLines, mLineIndex) {\r\n    var mLineElements = sdpLines[mLineIndex].split(' ');\r\n    // Scan from end for the convenience of removing an item.\r\n    for (var i = sdpLines.length-1; i >= 0; i--) {\r\n      var payload = extractSdp(sdpLines[i], /a=rtpmap:(\\d+) CN\\/\\d+/i);\r\n      if (payload) {\r\n        var cnPos = mLineElements.indexOf(payload);\r\n        if (cnPos !== -1) {\r\n          // Remove CN payload from m line.\r\n          mLineElements.splice(cnPos, 1);\r\n        }\r\n        // Remove CN line in sdp\r\n        sdpLines.splice(i, 1);\r\n      }\r\n    }\r\n\r\n    sdpLines[mLineIndex] = mLineElements.join(' ');\r\n    return sdpLines;\r\n  }\r\n</script>\r\n<div id=\"container\" ondblclick=\"enterFullScreen()\"> \r\n  <div id=\"card\">\r\n    <div id=\"local\">\r\n      <video width=\"100%\" height=\"100%\" id=\"localVideo\" autoplay=\"autoplay\" muted=\"true\"/>\r\n    </div>\r\n    <div id=\"remote\">\r\n      <video width=\"100%\" height=\"100%\" id=\"remoteVideo\" autoplay=\"autoplay\">\r\n      </video>\r\n      <div id=\"mini\">\r\n        <video width=\"100%\" height=\"100%\" id=\"miniVideo\" autoplay=\"autoplay\" muted=\"true\"/>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div id=\"footer\">\r\n  </div>\r\n</div>\r\n</body>\r\n</html>"]],"start1":0,"start2":0,"length1":0,"length2":19435}]],"length":19435,"saved":false}
