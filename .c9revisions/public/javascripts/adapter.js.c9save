{"ts":1369428286731,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var RTCPeerConnection = null;\nvar getUserMedia = null;\nvar attachMediaStream = null;\nvar reattachMediaStream = null;\nvar webrtcDetectedBrowser = null;\n\nfunction trace(text) {\n  // This function is used for logging.\n  if (text[text.length - 1] == '\\n') {\n    text = text.substring(0, text.length - 1);\n  }\n  console.log((performance.now() / 1000).toFixed(3) + \": \" + text);\n}\n\nif (navigator.mozGetUserMedia) {\n  console.log(\"This appears to be Firefox\");\n\n  webrtcDetectedBrowser = \"firefox\";\n\n  // The RTCPeerConnection object.\n  RTCPeerConnection = mozRTCPeerConnection;\n\n  // The RTCSessionDescription object.\n  RTCSessionDescription = mozRTCSessionDescription;\n\n  // The RTCIceCandidate object.\n  RTCIceCandidate = mozRTCIceCandidate;\n\n  // Get UserMedia (only difference is the prefix).\n  // Code from Adam Barth.\n  getUserMedia = navigator.mozGetUserMedia.bind(navigator);\n\n  // Attach a media stream to an element.\n  attachMediaStream = function(element, stream) {\n    console.log(\"Attaching media stream\");\n    element.mozSrcObject = stream;\n    element.play();\n  };\n\n  reattachMediaStream = function(to, from) {\n    console.log(\"Reattaching media stream\");\n    to.mozSrcObject = from.mozSrcObject;\n    to.play();\n  };\n\n  // Fake get{Video,Audio}Tracks\n  MediaStream.prototype.getVideoTracks = function() {\n    return [];\n  };\n\n  MediaStream.prototype.getAudioTracks = function() {\n    return [];\n  };\n} else if (navigator.webkitGetUserMedia) {\n  console.log(\"This appears to be Chrome\");\n\n  webrtcDetectedBrowser = \"chrome\";\n\n  // The RTCPeerConnection object.\n  RTCPeerConnection = webkitRTCPeerConnection;\n\n  // Get UserMedia (only difference is the prefix).\n  // Code from Adam Barth.\n  getUserMedia = navigator.webkitGetUserMedia.bind(navigator);\n\n  // Attach a media stream to an element.\n  attachMediaStream = function(element, stream) {\n    if (typeof element.srcObject !== 'undefined') {\n      element.srcObject = stream;\n    } else if (typeof element.mozSrcObject !== 'undefined') {\n      element.mozSrcObject = stream;\n    } else if (typeof element.src !== 'undefined') {\n      element.src = URL.createObjectURL(stream);\n    } else {\n      console.log('Error attaching stream to element.');\n    }\n  };\n\n  reattachMediaStream = function(to, from) {\n    to.src = from.src;\n  };\n\n  // The representation of tracks in a stream is changed in M26.\n  // Unify them for earlier Chrome versions in the coexisting period.\n  if (!webkitMediaStream.prototype.getVideoTracks) {\n    webkitMediaStream.prototype.getVideoTracks = function() {\n      return this.videoTracks;\n    };\n    webkitMediaStream.prototype.getAudioTracks = function() {\n      return this.audioTracks;\n    };\n  }\n\n  // New syntax of getXXXStreams method in M26.\n  if (!webkitRTCPeerConnection.prototype.getLocalStreams) {\n    webkitRTCPeerConnection.prototype.getLocalStreams = function() {\n      return this.localStreams;\n    };\n    webkitRTCPeerConnection.prototype.getRemoteStreams = function() {\n      return this.remoteStreams;\n    };\n  }\n} else {\n  console.log(\"Browser does not appear to be WebRTC-capable\");\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":3092}]],"length":3092}
